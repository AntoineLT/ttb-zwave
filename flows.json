[
    {
        "id": "ttb-zwave-tab",
        "type": "tab",
        "label": "ttb-zwave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json"
    },
    {
        "id": "nodeGeneratorZWave",
        "type": "subflow",
        "name": "nodeGenerator",
        "info": "",
        "in": [
            {
                "x": 40.6666259765625,
                "y": 70.99993896484375,
                "wires": [
                    {
                        "id": "assert1ZWave"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 458,
                "y": 81.33331298828125,
                "wires": [
                    {
                        "id": "assert1ZWave",
                        "port": 0
                    }
                ]
            },
            {
                "x": 318.00006103515625,
                "y": 653.6666049957275,
                "wires": [
                    {
                        "id": "getFlowZWave",
                        "port": 0
                    }
                ]
            },
            {
                "x": 312.99981689453125,
                "y": 704.6666049957275,
                "wires": [
                    {
                        "id": "nodesZWave",
                        "port": 0
                    }
                ]
            },
            {
                "x": 336.66668701171875,
                "y": 773.6666049957275,
                "wires": [
                    {
                        "id": "addToServerZWave",
                        "port": 1
                    }
                ]
            }
        ],
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json"
    },
    {
        "id": "controlLoopZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "Control loop",
        "func": "// some work left?\n\nif(context.global.nodeGenerator.length >0) {\n    // can enter?\n    if(typeof context.global.putFlag === 'undefined' || context.global.putFlag === false) { // let's in\n        context.global.putFlag = true; // prevent enter\n        msg = context.global.nodeGenerator.shift(); // get the next\n        //console.log(\"Gate is open: enter loop with \" + msg.payload.id + \" (array length:\" + context.global.nodeGenerator.length+\")\");\n        return msg;\n    }\n    // else  console.log(\"Gate is closed\");\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 486.9998779296875,
        "y": 178.3332920074463,
        "wires": [
            [
                "globalZWave"
            ]
        ]
    },
    {
        "id": "parametersZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "NodeFactory Parameters",
        "func": "\nmsg.node = msg.payload;\n\nif(Array.isArray(msg.node)) {\n    for(var i = 0; i < msg.node.length; i++) {\n        msg.node[i].type = msg.node[i].typeNode;\n        msg.node[i].broker = \"MQTT.Localhost\";\n        msg.node[i].x = 100 + Math.random() * 100;\n        msg.node[i].y = 100 + Math.random() * 100;\n        msg.node[i].extra.ui = true;\n    }\n} else {\n    msg.node.type = msg.node.typeNode;\n    if(msg.node.typeNode.includes(\"subflow\") === false) msg.node.broker = \"MQTT.Localhost\";\n    msg.node.x = 100 + Math.random() * 100;\n    msg.node.y = 100 + Math.random() * 100;\n    msg.node.extra.ui = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 231.66664123535156,
        "y": 462.66661262512207,
        "wires": [
            [
                "getFlowsZWave"
            ]
        ]
    },
    {
        "id": "assert1ZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "Assert (qui n'en n'est pas un)",
        "func": "if(Array.isArray(msg.payload)){\n    if(msg.payload[0].name===undefined) \n        return [{payload:\"ASSERT: msg.payload.name missing\"}, null];\n    \n    if(msg.payload[0].extra===undefined) \n        return [{payload:\"ASSERT: msg.payload.extra missing\"}, null];\n        \n    msg.tab = msg.payload; //!!! qu'est ce que ça fout là?\n    return [null,msg];\n} else {\n    if(msg.payload.name===undefined) \n        return [{payload:\"ASSERT: msg.payload.name missing\"}, null];\n    \n    if(msg.payload.extra===undefined) \n        return [{payload:\"ASSERT: msg.payload.extra missing\"}, null];\n        \n    return [null,msg];\n}",
        "outputs": "2",
        "noerr": 0,
        "x": 206.6666259765625,
        "y": 86.99993896484375,
        "wires": [
            [],
            [
                "4fa4281b.526b38"
            ]
        ]
    },
    {
        "id": "getFlowsZWave",
        "type": "http request",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "GET flows",
        "method": "GET",
        "ret": "obj",
        "url": "/flows",
        "tls": "",
        "x": 195,
        "y": 515.9999599456787,
        "wires": [
            [
                "idTabZWave"
            ]
        ]
    },
    {
        "id": "idTabZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "find Tab ID",
        "func": "msg.idTab = undefined;\nfor(var i = 0; i < msg.payload.length; i++) {\n    /*\n    if(msg.payload[i].type === \"tab\" && msg.payload[i].label === \"HomeKeeper\") {\n        msg.idTab = msg.payload[i].id;\n        break;\n    }\n    */\n    if(msg.payload[i].type === \"zwave\") {\n        msg.idTab = msg.payload[i].z;\n        break;\n    }\n}\nif(msg.idTab) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 195,
        "y": 573.9999599456787,
        "wires": [
            [
                "formatURLZWave"
            ]
        ]
    },
    {
        "id": "formatURLZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "format URL",
        "func": "msg.url = \"/flow/\"+msg.idTab;\nmsg.method = \"GET\";\nmsg.headers = {\n    \"Content-Type\":\"application/json\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 195,
        "y": 635.9999599456787,
        "wires": [
            [
                "getFlowZWave"
            ]
        ]
    },
    {
        "id": "getFlowZWave",
        "type": "http request",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "GET flow",
        "method": "use",
        "ret": "obj",
        "url": "",
        "x": 187.99999237060547,
        "y": 690.9999694824219,
        "wires": [
            [
                "nodesZWave"
            ]
        ]
    },
    {
        "id": "nodesZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "push payload",
        "func": "msg.result = msg.payload;\nmsg.payload = msg.payload.nodes;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 193,
        "y": 748.999979019165,
        "wires": [
            [
                "addToServerZWave"
            ]
        ]
    },
    {
        "id": "addToServerZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "addNodeToServerFlows",
        "func": "var node = msg.node;\nnode.z = msg.payload[0].id;\n\nvar flow = msg.payload;\nvar contentL = flow.length;\n\nif(!node.id) {\n    node.id = (1+Math.random()*4294967295).toString(16);\n    flow.push(node);\n    return [null,msg]; // PUT it\n} else {\n    // if an id exists, find if the node is already in the flow\n    for(var i = 0; i < contentL; i++) {\n        if(flow[i].id === node.id)\n            break;\n    }\n    if(i === contentL){ // not found\n\t\tflow.push(node); // add it\n\t\treturn [null,msg]; // PUT it\n    }\n    else\n        return [msg, null];\n}\n\n\n\n",
        "outputs": "2",
        "noerr": 0,
        "x": 218.00006103515625,
        "y": 828.999979019165,
        "wires": [
            [
                "nextElementZWave"
            ],
            [
                "formatHttpZWave"
            ]
        ]
    },
    {
        "id": "formatHttpZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "format HTTP",
        "func": "if(msg.idSource !== undefined) {\n    var index = msg.techno + \"-service\";\n    if(Array.isArray(msg.idSource)) {\n        var inc = 0;\n        for(var j = 0; j < msg.payload.length; j++) {\n            for(var k = 0; k < msg.idSource.length; k++) {\n                if(msg.payload[j].id === msg.idSource[k]\n                    && msg.payload[j].wires[0].indexOf(index)===-1) {\n                    msg.payload[j].wires[0].push(index);\n                    inc++;\n                }\n                if(inc === msg.idSource.length){\n                    break;\n                }\n            }\n        }\n        if(inc === msg.idSource.length) {\n            msg.method = \"PUT\";\n            msg.headers = {\n                \"Content-Type\":\"application/json\"\n            };\n            msg.payload = msg.result;\n            return msg;\n        }\n    } else {\n        for(var j = 0; j < msg.payload.length; j++) {\n            if(msg.payload[j].id === msg.idSource && msg.payload[j].wires[0].indexOf(index)===-1) {\n                msg.payload[j].wires[0].push(index);\n                break;\n            }\n        }\n        if(msg.idSource && j < msg.payload.length) {\n            msg.method = \"PUT\";\n            msg.headers = {\n                \"Content-Type\":\"application/json\"\n            };\n            msg.payload = msg.result;\n            return msg;\n        }\n    }\n}\nmsg.method = \"PUT\";\nmsg.headers = {\n    \"Content-Type\":\"application/json\"\n};\nmsg.payload = msg.result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 494.0000534057617,
        "y": 835.9999485015869,
        "wires": [
            [
                "putFlowZWave"
            ]
        ]
    },
    {
        "id": "putFlowZWave",
        "type": "http request",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "PUT flow",
        "method": "use",
        "ret": "txt",
        "url": "",
        "x": 485.0000534057617,
        "y": 880.9999485015869,
        "wires": [
            [
                "setMessageZWave",
                "nextElementZWave"
            ]
        ]
    },
    {
        "id": "setMessageZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "Set message",
        "func": "msg.message = \"Added new device slot \" + msg.node.nodeid;\n\nif(msg.node.nodeInfo !== undefined)\n    msg.message =  msg.message + \": \" + msg.node.nodeInfo.product + \" (\" +msg.node.nodeInfo.manufacturer + \")\";\n\nmsg.message = msg.message + \" Refresh your browser !\"\nmsg.notification = msg.message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 496,
        "y": 930.999979019165,
        "wires": [
            [
                "notifZWave",
                "debug5ZWave"
            ]
        ]
    },
    {
        "id": "newDeviceZWave",
        "type": "mqtt in",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "",
        "topic": "newdevice/zwave",
        "qos": "2",
        "broker": "MQTT.Localhost",
        "x": 116,
        "y": 211.5,
        "wires": [
            [
                "jsonConvZWave"
            ]
        ]
    },
    {
        "id": "jsonConvZWave",
        "type": "json",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "",
        "x": 517,
        "y": 211.5,
        "wires": [
            [
                "assert2ZWave"
            ]
        ]
    },
    {
        "id": "Assert3ZWave",
        "type": "function",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "Assert",
        "func": "// ID du node dans Node-RED\nif(msg.payload.id===undefined) \n    return [{payload:\"ASSERT: msg.payload.id missing\"}, null];\n\n// ID du node dans ZWave\nif(msg.payload.nodeid===undefined) \n    return [{payload:\"ASSERT: msg.payload.nodeid missing\"}, null];\n\n// Nom de l'icône du node dans Node-RED\nif(msg.payload.mark===undefined) \n    return [{payload:\"ASSERT: msg.payload.mark missing\"}, null];\n    \nreturn [null,msg];",
        "outputs": "2",
        "noerr": 0,
        "x": 309,
        "y": 524.5,
        "wires": [
            [
                "debug3ZWave"
            ],
            [
                "subFLowZWave"
            ]
        ]
    },
    {
        "id": "debug3ZWave",
        "type": "debug",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "",
        "active": true,
        "console": false,
        "complete": "payload",
        "x": 498.3333282470703,
        "y": 517.5000085830688,
        "wires": []
    },
    {
        "id": "subFLowZWave",
        "type": "subflow:nodeGeneratorZWave",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "",
        "x": 506.66666412353516,
        "y": 669.1666679382324,
        "wires": [
            [
                "8b6d8d25.24394"
            ],
            [
                "b3aa423b.2a4f5"
            ],
            [
                "ef07f87d.456de8"
            ],
            [
                "bc8162fc.9766d"
            ]
        ]
    },
    {
        "id": "commentDOwn2ZWave",
        "type": "commentdown",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "Errors",
        "info": " ",
        "langs": [
            {
                "key": "en-US",
                "title": "Errors",
                "body": " ",
                "isDefault": true
            }
        ],
        "x": 711.6666641235352,
        "y": 556.6666679382324,
        "wires": []
    },
    {
        "id": "info1ZWave",
        "type": "info",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "ttb-zwave",
        "info": "",
        "icon": "comment.png",
        "langs": [
            {
                "key": "en-US",
                "title": "ttb-zwave",
                "body": "",
                "isDefault": true
            }
        ],
        "currentLanguage": "en-US",
        "x": 84.49993896484375,
        "y": 52.75001525878906,
        "wires": []
    },
    {
        "id": "notifZWave",
        "type": "notifyUI",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "",
        "notification": "",
        "notificationType": "success",
        "fix": false,
        "defaultTout": true,
        "timeout": "",
        "timeoutUnits": "",
        "x": 689.0000534057617,
        "y": 967.9999885559082,
        "wires": [
            []
        ]
    },
    {
        "id": "globalZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "Set hk_ordinate",
        "func": "if(!context.global.settings.hk_ordinate) {\n    context.global.settings.hk_ordinate = 60;\n} else {\n    context.global.settings.hk_ordinate += 60;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 201.66664123535156,
        "y": 412.66661262512207,
        "wires": [
            [
                "parametersZWave"
            ]
        ]
    },
    {
        "id": "nextElementZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "done",
        "func": "//console.log(\"End of loop\");\ncontext.global.putFlag = false;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 507.9998779296875,
        "y": 428.9998779296875,
        "wires": [
            [
                "controlLoopZWave"
            ]
        ]
    },
    {
        "id": "debug5ZWave",
        "type": "debug",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "notification",
        "x": 706,
        "y": 930.999979019165,
        "wires": []
    },
    {
        "id": "4fa4281b.526b38",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "push msg",
        "func": "if(typeof context.global.nodeGenerator === 'undefined')\n    context.global.nodeGenerator = [];\n\n\ncontext.global.nodeGenerator.push(msg);\n//console.log(\"Push id:\" + msg.payload.id + \" (=> array length:\" + context.global.nodeGenerator.length +\")\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 253.28561401367188,
        "y": 178.61901473999023,
        "wires": [
            [
                "controlLoopZWave"
            ]
        ]
    },
    {
        "id": "b14922d6.95bca",
        "type": "function",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "Config Informations",
        "func": "var ip  = msg.payload.replace(/\\r?\\n|\\r/g, \"\");\n\nvar taglet;\nswitch(msg.service.typeNode) {\n    case \"zwave-binary-switch\":\n        taglet = \"switch\";\n        break;\n        \n    case \"zwave-light-dimmer-switch\":\n        taglet = \"light\";\n        break;\n        \n    case \"zwave-remote-control-multi-purpose\":\n    case \"nodonSoftRemote\":\n        taglet = \"remote\";\n        break;\n        \n    case \"zwave-motion-sensor\":\n    case \"zwave-binary-sensor\":\n    case \"aeotecMultiSensor\":\n        taglet = \"motion\";\n        break;\n        \n    default:\n        break;\n}\n\nif(taglet)\n    msg.service.extra.skale = \"http://\"+ip+\"/taglets/com.daw.\"+taglet+\".taglet\";\nelse\n    msg.service.extra.skale = \"not available\";\n\nmsg.payload = msg.service;\nmsg.service = undefined;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 501,
        "y": 440.5,
        "wires": [
            [
                "Assert3ZWave"
            ]
        ]
    },
    {
        "id": "54b8609b.e3b72",
        "type": "function",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "Specific parameters",
        "func": "var techno = msg.topic.replace(/newdevice\\//g, \"\");\n\nmsg.service = {\n    id: msg.payload.senderID + \"-ZWave\",\n    name: \"\",\n    productname: msg.payload.productname,\n    classindexname: msg.payload.classindexname,\n    nodeid: msg.payload.senderID,\n    typeNode: msg.payload.typeNode,\n    commandclass: msg.payload.commandclass,\n    classindex: msg.payload.classindex,\n    nodeInfo: msg.payload.nodeInfo,\n    mark: msg.payload.nodeInfo.manufacturer.toLowerCase().replace(/ /g, '') + \".png\",\n    extra: {\n        StatusIn:  \"coldfacts/\"+techno+\"/\"+msg.payload.senderID+'/in',\n    \tStatusOut: \"coldfacts/\"+techno+\"/\"+msg.payload.senderID+'/out',\n    \tDeviceType: msg.payload.nodeInfo.type,\n    },\n    wires: [[]]\n};\n\n// !!! always provide a statusIn even if not used?\nif(msg.payload.typeNode.includes('remote') || msg.payload.typeNode.includes('motion')|| msg.payload.typeNode.includes('binary'))\n    msg.service.extra.StatusIn = undefined;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 368,
        "y": 365.5,
        "wires": [
            [
                "52def1b3.bf7fa8"
            ]
        ]
    },
    {
        "id": "52def1b3.bf7fa8",
        "type": "boxip",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "",
        "x": 315,
        "y": 447.5,
        "wires": [
            [
                "b14922d6.95bca"
            ],
            []
        ]
    },
    {
        "id": "debug2ZWave",
        "type": "debug",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "",
        "active": true,
        "console": false,
        "complete": "payload",
        "x": 398,
        "y": 301.5,
        "wires": []
    },
    {
        "id": "commentDOwn1ZWave",
        "type": "commentdown",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "Error",
        "info": " ",
        "x": 378,
        "y": 261.5,
        "wires": []
    },
    {
        "id": "assert2ZWave",
        "type": "function",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "Assert",
        "func": "if(msg.payload.senderID===undefined) return [{payload:\"ASSERT: msg.payload.senderID missing\"}, null];\n\nreturn [null,msg];",
        "outputs": "2",
        "noerr": 0,
        "x": 144,
        "y": 307.5,
        "wires": [
            [
                "debug2ZWave"
            ],
            [
                "54b8609b.e3b72"
            ]
        ]
    },
    {
        "id": "34545b63.628604",
        "type": "inject",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "test FGWPE Wall Plug",
        "topic": "",
        "payload": "{ \"senderID\": 100, \"nodeInfo\": { \"manufacturer\": \"FIBARO System\", \"manufacturerid\": \"0x010f\", \"product\": \"FGWPE Wall Plug\", \"producttype\": \"0x0600\", \"productid\": \"0x1000\", \"type\": \"Binary Switch\", \"name\": \"\", \"loc\": \"\" }, \"productname\": \"FIBARO System - FGWPE Wall Plug\", \"typeNode\": \"zwave-binary-switch\", \"commandclass\": \"37\", \"classindex\": \"0\", \"classindexname\": \"Switch\" }",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 141,
        "y": 154.5,
        "wires": [
            [
                "jsonConvZWave"
            ]
        ]
    },
    {
        "id": "cd280d5.4c954f",
        "type": "inject",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "test NodOn - CRC-3-6-0x Soft Remote",
        "topic": "",
        "payload": "{\"senderID\":101,\"nodeInfo\":{\"manufacturer\":\"NodOn\",\"manufacturerid\":\"0x0165\",\"product\":\"CRC-3-6-0x Soft Remote\",\"producttype\":\"0x0002\",\"productid\":\"0x0002\",\"type\":\"Remote Control MultiPurpose\",\"name\":\"\",\"loc\":\"\"},\"productname\":\"NodOn - CRC-3-6-0x Soft Remote\",\"typeNode\":\"nodonSoftRemote\"}",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 191.5,
        "y": 111.5,
        "wires": [
            [
                "jsonConvZWave"
            ]
        ]
    },
    {
        "id": "8b6d8d25.24394",
        "type": "debug",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "",
        "active": false,
        "console": false,
        "complete": "payload",
        "x": 731.6666641235352,
        "y": 596.6666679382324,
        "wires": []
    },
    {
        "id": "b3aa423b.2a4f5",
        "type": "debug",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "",
        "active": false,
        "console": false,
        "complete": "payload",
        "x": 731.6666641235352,
        "y": 636.6666679382324,
        "wires": []
    },
    {
        "id": "ef07f87d.456de8",
        "type": "debug",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "",
        "active": false,
        "console": false,
        "complete": "payload",
        "x": 731.6666641235352,
        "y": 676.6666679382324,
        "wires": []
    },
    {
        "id": "bc8162fc.9766d",
        "type": "debug",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave3/flows.json",
        "name": "",
        "active": false,
        "console": false,
        "complete": "payload",
        "x": 731.6666641235352,
        "y": 716.6666679382324,
        "wires": []
    }
]
[
    {
        "id": "ttb-zwave-tab",
        "type": "tab",
        "label": "ttb-zwave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json"
    },
    {
        "id": "nodeGeneratorZWave",
        "type": "subflow",
        "name": "nodeGenerator",
        "info": "",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "globalZWave"
                    }
                ]
            }
        ],
        "out": [],
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json"
    },
    {
        "id": "controlLoopZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "Control loop",
        "func": "if(typeof context.global.nodeGenerator !== 'undefined'\n        && typeof context.global.nodeGenerator[0] !== 'undefined'\n        && context.global.putFlag === true) {\n    msg = context.global.nodeGenerator[0]; // !!! pop ?\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 100,
        "wires": [
            [
                "assert1ZWave"
            ]
        ]
    },
    {
        "id": "factoryZWave",
        "type": "nodefactory",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "x": 740,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "clientServerZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "client or server?",
        "func": "return [msg, null]; // create on server\n//return [null, msg]; // create on client",
        "outputs": "2",
        "noerr": 0,
        "x": 740,
        "y": 180,
        "wires": [
            [
                "getFlowsZWave"
            ],
            [
                "factoryZWave"
            ]
        ]
    },
    {
        "id": "comment1ZWave",
        "type": "commentdown",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "Create on client",
        "info": " ",
        "langs": [
            {
                "key": "en-US",
                "title": "Create on client",
                "body": " ",
                "isDefault": true
            }
        ],
        "x": 740,
        "y": 240,
        "wires": []
    },
    {
        "id": "parametersZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "NodeFactory Parameters",
        "func": "if(Array.isArray(msg.payload)) {\n    for(var i = 0; i < msg.payload.length; i++) {\n        msg.payload[i].type = msg.typeNode;\n        msg.payload[i].broker = \"MQTT.Localhost\";\n        msg.payload[i].x = 100 + Math.random() * 50;\n        msg.payload[i].y = 100 + Math.random() * 50;\n        msg.payload[i].extra.ui = true;\n        msg.node = msg.payload;\n    }\n} else {\n    msg.payload.type = msg.typeNode;\n    if(msg.typeNode.includes(\"subflow\") === false) msg.payload.broker = \"MQTT.Localhost\";\n    msg.payload.x = 100 + Math.random() * 50;\n    msg.payload.y = 100 + Math.random() * 50;\n    msg.payload.extra.ui = true;\n    msg.node = msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 120,
        "wires": [
            [
                "clientServerZWave"
            ]
        ]
    },
    {
        "id": "assert1ZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "Assert",
        "func": "if(Array.isArray(msg.payload)){\n    if(msg.payload[0].name===undefined) \n        return [{payload:\"ASSERT: msg.payload.name missing\"}, null];\n    \n    if(msg.payload[0].extra===undefined) \n        return [{payload:\"ASSERT: msg.payload.extra missing\"}, null];\n        \n    msg.tab = msg.payload;\n    return [null,msg];\n} else {\n    if(msg.payload.name===undefined) \n        return [{payload:\"ASSERT: msg.payload.name missing\"}, null];\n    \n    if(msg.payload.extra===undefined) \n        return [{payload:\"ASSERT: msg.payload.extra missing\"}, null];\n        \n    return [null,msg];\n}",
        "outputs": "2",
        "noerr": 0,
        "x": 550,
        "y": 100,
        "wires": [
            [
                "debug1ZWave"
            ],
            [
                "parametersZWave"
            ]
        ]
    },
    {
        "id": "debug1ZWave",
        "type": "debug",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "active": true,
        "console": false,
        "complete": "payload",
        "x": 730,
        "y": 79,
        "wires": []
    },
    {
        "id": "comment2ZWave",
        "type": "commentdown",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "Error",
        "info": " ",
        "x": 710,
        "y": 40,
        "wires": []
    },
    {
        "id": "getFlowsZWave",
        "type": "http request",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "GET flows",
        "method": "GET",
        "ret": "obj",
        "url": "/flows",
        "x": 950,
        "y": 160,
        "wires": [
            [
                "idTabZWave"
            ]
        ]
    },
    {
        "id": "idTabZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "find Tab ID",
        "func": "msg.idTab = undefined;\nfor(var i = 0; i < msg.payload.length; i++) {\n    /*\n    if(msg.payload[i].type === \"tab\" && msg.payload[i].label === \"HomeKeeper\") {\n        msg.idTab = msg.payload[i].id;\n        break;\n    }\n    */\n    if(msg.payload[i].type === \"zwave\") {\n        msg.idTab = msg.payload[i].z;\n        break;\n    }\n}\nif(msg.idTab) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 200,
        "wires": [
            [
                "boxipZWave"
            ]
        ]
    },
    {
        "id": "formatURLZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "format URL",
        "func": "msg.url = \"http://\"+msg.payload+\".local/flow/\"+msg.idTab;\nmsg.method = \"GET\";\nmsg.headers = {\n    \"Content-Type\":\"application/json\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 280,
        "wires": [
            [
                "getFlowZWave"
            ]
        ]
    },
    {
        "id": "getFlowZWave",
        "type": "http request",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "GET flow",
        "method": "use",
        "ret": "obj",
        "url": "",
        "x": 1120,
        "y": 280,
        "wires": [
            [
                "nodesZWave"
            ]
        ]
    },
    {
        "id": "nodesZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "JSON nodes",
        "func": "msg.result = msg.payload;\nmsg.payload = msg.payload.nodes;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1130,
        "y": 320,
        "wires": [
            [
                "arrayOrNotZWave"
            ]
        ]
    },
    {
        "id": "boxipZWave",
        "type": "boxname",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "x": 940,
        "y": 240,
        "wires": [
            [
                "formatURLZWave"
            ]
        ]
    },
    {
        "id": "addToServerZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "addNodeToServerFlows",
        "func": "var node = msg.node;\nnode.z = msg.payload[0].id;\n\nvar content = msg.payload,\n    contentL = content.length;\n\nif(!node.id) {\n    node.id = (1+Math.random()*4294967295).toString(16);\n    content.push(node);\n} else {\n    for(var i = 0; i < contentL; i++) {\n        if(content[i].id === node.id && content[i].type === node.type)\n            break;\n    }\n    if(i === contentL) content.push(node);\n}\nif(contentL < content.length) {\n    //msg.payload = JSON.stringify(msg.payload, null, 4);\n    return msg;\n} else {\n    context.global.nodeGenerator.shift();\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1410,
        "y": 380,
        "wires": [
            [
                "formatHttpZWave"
            ]
        ]
    },
    {
        "id": "arrayOrNotZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "JSON or JSON's Array",
        "func": "if(Array.isArray(msg.node)) {\n    return [msg,null];\n} else {\n    return [null,msg];\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 1160,
        "y": 360,
        "wires": [
            [
                "addToServerArrayZWave"
            ],
            [
                "addToServerZWave"
            ]
        ]
    },
    {
        "id": "addToServerArrayZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "addNodeToServerFlows Array",
        "func": "var node = msg.node;\n\nvar content  = msg.payload,\n    contentL = content.length;\n\nfor(var i = 0; i < node.length; i++) {\n    node[i].z = msg.payload[0].id;\n    \n    if(!node[i].id) {\n        node[i].id = (1+Math.random()*4294967295).toString(16);\n        content.push(node[i]);\n    } else {\n        for(var j = 0; j < contentL; j++) {\n            if(content[j].id === node[i].id && content[j].type === node[i].type)\n                break;\n        }\n        if(j === contentL) content.push(node[i]);\n    }\n}\nif(contentL < content.length) {\n    //msg.payload = JSON.stringify(msg.payload, null, 4);\n    return msg;\n} else {\n    context.global.nodeGenerator.shift();\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1430,
        "y": 340,
        "wires": [
            [
                "formatHttpZWave"
            ]
        ]
    },
    {
        "id": "formatHttpZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "format HTTP",
        "func": "if(msg.idSource !== undefined) {\n    var index = msg.techno + \"-service\";\n    if(Array.isArray(msg.idSource)) {\n        var inc = 0;\n        for(var j = 0; j < msg.payload.length; j++) {\n            for(var k = 0; k < msg.idSource.length; k++) {\n                if(msg.payload[j].id === msg.idSource[k]\n                    && msg.payload[j].wires[0].indexOf(index)===-1) {\n                    msg.payload[j].wires[0].push(index);\n                    inc++;\n                }\n                if(inc === msg.idSource.length){\n                    break;\n                }\n            }\n        }\n        if(inc === msg.idSource.length) {\n            msg.method = \"PUT\";\n            msg.headers = {\n                \"Content-Type\":\"application/json\"\n            };\n            msg.payload = msg.result;\n            return msg;\n        }\n    } else {\n        for(var j = 0; j < msg.payload.length; j++) {\n            if(msg.payload[j].id === msg.idSource \n                && msg.payload[j].wires[0].indexOf(index)===-1) {\n                msg.payload[j].wires[0].push(index);\n                break;\n            }\n        }\n        if(msg.idSource && j < msg.payload.length) {\n            msg.method = \"PUT\";\n            msg.headers = {\n                \"Content-Type\":\"application/json\"\n            };\n            msg.payload = msg.result;\n            return msg;\n        }\n    }\n}\nmsg.method = \"PUT\";\nmsg.headers = {\n    \"Content-Type\":\"application/json\"\n};\nmsg.payload = msg.result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1670,
        "y": 360,
        "wires": [
            [
                "putFlowZWave"
            ]
        ]
    },
    {
        "id": "putFlowZWave",
        "type": "http request",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "PUT flow",
        "method": "use",
        "ret": "txt",
        "url": "",
        "x": 1660,
        "y": 400,
        "wires": [
            [
                "emptyMessageZWave",
                "formMessageZWave",
                "validZWave",
                "setMessageZWave",
                "nextElementZWave"
            ]
        ]
    },
    {
        "id": "setMessageZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "Set message",
        "func": "msg.message = \"Added new device\";\n\nif(msg.nodeInfo !== undefined)\n    msg.message =  msg.message + \" slot \" + msg.senderID + \": \" + msg.nodeInfo.product + \" (\" +msg.nodeInfo.manufacturer + \")\";\n\nmsg.message = msg.message + \" Refresh your browser !\"\nmsg.notification = msg.message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1970,
        "y": 300,
        "wires": [
            [
                "notifZWave",
                "debug5ZWave"
            ]
        ]
    },
    {
        "id": "emptyMessageZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "empty msg",
        "func": "msg = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1970,
        "y": 380,
        "wires": [
            [
                "flowFilterZWave"
            ]
        ]
    },
    {
        "id": "validZWave",
        "type": "mqtt out",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "topic": "hk/valid",
        "qos": "",
        "retain": "false",
        "broker": "MQTT.Localhost",
        "x": 1960,
        "y": 540,
        "wires": []
    },
    {
        "id": "flowFilterZWave",
        "type": "http request",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "GET flowFilter",
        "method": "GET",
        "ret": "txt",
        "url": "/flowFilter",
        "x": 1980,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "newDeviceZWave",
        "type": "mqtt in",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "topic": "newdevice/zwave",
        "qos": "2",
        "broker": "MQTT.Localhost",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "jsonConvZWave"
            ]
        ]
    },
    {
        "id": "jsonConvZWave",
        "type": "json",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "x": 270,
        "y": 120,
        "wires": [
            [
                "assert2ZWave"
            ]
        ]
    },
    {
        "id": "assert2ZWave",
        "type": "function",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "Assert",
        "func": "if(msg.payload.senderID===undefined) \n    return [{payload:\"ASSERT: msg.payload.senderID missing\"}, null];\n\nreturn [null,msg];",
        "outputs": "2",
        "noerr": 0,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "debug2ZWave"
            ],
            [
                "confInfZWave"
            ]
        ]
    },
    {
        "id": "debug2ZWave",
        "type": "debug",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "active": true,
        "console": false,
        "complete": "payload",
        "x": 570,
        "y": 160,
        "wires": []
    },
    {
        "id": "confInfZWave",
        "type": "function",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "Config Informations",
        "func": "msg.techno         = msg.topic.replace(/newdevice\\//g, \"\");\nmsg.typeNode       = msg.payload.typeNode;\nmsg.senderID       = msg.payload.senderID;\nmsg.nodeInfo       = msg.payload.nodeInfo;\nmsg.productname    = msg.payload.productname;\nmsg.classindexname = msg.payload.classindexname;\nmsg.commandclass   = msg.payload.commandclass;\nmsg.classindex     = msg.payload.classindex;\n\nswitch(msg.typeNode) {\n    case \"zwave-binary-switch\":\n        msg.taglet = \"switch\";\n        break;\n        \n    case \"zwave-light-dimmer-switch\":\n        msg.taglet = \"light\";\n        break;\n        \n    case \"zwave-remote-control-multi-purpose\":\n    case \"nodonSoftRemote\":\n        msg.taglet = \"remote\";\n        break;\n        \n    case \"zwave-motion-sensor\":\n    case \"zwave-binary-sensor\":\n    case \"aeotecMultiSensor\":\n        msg.taglet = \"motion\";\n        break;\n        \n    default:\n        break;\n}\nmsg.service = msg.payload;\nmsg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 200,
        "wires": [
            [
                "boxIP2ZWave"
            ]
        ]
    },
    {
        "id": "boxIP2ZWave",
        "type": "boxip",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "x": 550,
        "y": 200,
        "wires": [
            [
                "specZWave"
            ],
            []
        ]
    },
    {
        "id": "specZWave",
        "type": "function",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "Specific parameters",
        "func": "msg.payload = msg.payload.replace(/\\r?\\n|\\r/g, \"\");\n\nmsg.service = {\n    name: msg.nodeInfo.product.slice(msg.nodeInfo.product.indexOf(\" \")+1, msg.nodeInfo.product.length),\n    id: msg.senderID + \"-\" + msg.nodeInfo.product.replace(/ /g, ''),\n    productname: msg.productname,\n    classindexname: msg.classindexname,\n    nodeid: msg.senderID,\n    commandclass: msg.commandclass,\n    classindex: msg.classindex,\n    mark: msg.nodeInfo.manufacturer.toLowerCase().replace(/ /g, '') + \".png\",\n    extra: {\n        StatusIn:  \"coldfacts/\"+msg.techno+\"/\"+msg.senderID+'/in',\n    \tStatusOut: \"coldfacts/\"+msg.techno+\"/\"+msg.senderID+'/out',\n    \tDeviceType: msg.nodeInfo.type,\n    \tskale: \"http://\"+msg.payload+\"/taglets/com.daw.\"+msg.taglet+\".taglet\"\n    },\n    wires: [[]]\n};\n\nif(msg.typeNode.includes('remote') \n    || msg.typeNode.includes('motion')\n    || msg.typeNode.includes('binary'))\n    msg.service.extra.StatusIn = undefined;\n    \nmsg.payload = msg.service;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 200,
        "wires": [
            [
                "Assert3ZWave"
            ]
        ]
    },
    {
        "id": "Assert3ZWave",
        "type": "function",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "Assert",
        "func": "// ID du node dans Node-RED\nif(msg.payload.id===undefined) \n    return [{payload:\"ASSERT: msg.payload.id missing\"}, null];\n\n// ID du node dans ZWave\nif(msg.payload.nodeid===undefined) \n    return [{payload:\"ASSERT: msg.payload.nodeid missing\"}, null];\n\n// Nom de l'icône du node dans Node-RED\nif(msg.payload.mark===undefined) \n    return [{payload:\"ASSERT: msg.payload.mark missing\"}, null];\n    \nreturn [null,msg];",
        "outputs": "2",
        "noerr": 0,
        "x": 950,
        "y": 200,
        "wires": [
            [
                "debug3ZWave"
            ],
            [
                "debug4ZWave",
                "subFLowZWave"
            ]
        ]
    },
    {
        "id": "debug3ZWave",
        "type": "debug",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "active": true,
        "console": false,
        "complete": "payload",
        "x": 1130,
        "y": 160,
        "wires": []
    },
    {
        "id": "debug4ZWave",
        "type": "debug",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1130,
        "y": 240,
        "wires": []
    },
    {
        "id": "subFLowZWave",
        "type": "subflow:nodeGeneratorZWave",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "x": 1140,
        "y": 200,
        "wires": []
    },
    {
        "id": "commentDOwn1ZWave",
        "type": "commentdown",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "Error",
        "info": " ",
        "x": 550,
        "y": 120,
        "wires": []
    },
    {
        "id": "commentDOwn2ZWave",
        "type": "commentdown",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "Error",
        "info": " ",
        "x": 1110,
        "y": 120,
        "wires": []
    },
    {
        "id": "info1ZWave",
        "type": "info",
        "z": "ttb-zwave-tab",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "ttb-zwave",
        "info": "",
        "icon": "comment.png",
        "langs": [
            {
                "key": "en-US",
                "title": "ttb-zwave",
                "body": "",
                "isDefault": true
            }
        ],
        "currentLanguage": "en-US",
        "x": 80,
        "y": 80,
        "wires": []
    },
    {
        "id": "notifZWave",
        "type": "notifyUI",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "notification": "",
        "notificationType": "success",
        "fix": false,
        "defaultTout": true,
        "timeout": "",
        "timeoutUnits": "",
        "x": 1960,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "globalZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "Set global variable",
        "func": "if(!context.global.settings.hk_ordinate) {\n    context.global.settings.hk_ordinate = 60;\n} else {\n    context.global.settings.hk_ordinate += 60;\n}\nif(typeof context.global.nodeGenerator === 'undefined' || context.global.nodeGenerator.length === 0) {\n    context.global.putFlag = true;\n    context.global.nodeGenerator = [];\n} \ncontext.global.nodeGenerator.push(msg);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 190,
        "y": 100,
        "wires": [
            [
                "controlLoopZWave"
            ]
        ]
    },
    {
        "id": "nextElementZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "next element ?",
        "func": "context.global.nodeGenerator.shift();\nif(typeof context.global.nodeGenerator !== 'undefined'\n        && typeof context.global.nodeGenerator[0] !== 'undefined') {\n    context.global.putFlag = true;\n} else {\n    context.global.putFlag = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 975,
        "y": 590,
        "wires": [
            [
                "controlLoopZWave"
            ]
        ]
    },
    {
        "id": "debug5ZWave",
        "type": "debug",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "notification",
        "x": 2180,
        "y": 300,
        "wires": []
    },
    {
        "id": "formMessageZWave",
        "type": "function",
        "z": "nodeGeneratorZWave",
        "origin": "/root/userdir/node_modules/ttb-zwave2/flows.json",
        "name": "MSG format",
        "func": "if(msg._topic.includes(\"service\")) {\n    switch(msg.techno) {\n        case \"weather\":\n            msg.techno = \"La météo\";\n            break;\n            \n        case \"europe1\":\n            msg.techno = \"Europe 1\";\n            break;\n            \n        case \"presence\":\n            msg.techno = \"Votre service de présence\";\n            break;\n            \n        case \"alert\":\n            msg.techno = \"Votre service d'alerte\";\n            break;\n            \n        case \"hotline\":\n            msg.techno = \"La hotline Digital Airwayze\";\n            break;\n            \n        case \"withings\":\n            msg.techno = \"Votre balance\";\n            break;\n            \n        case \"flic\":\n            msg.techno = \"Votre bouton\";\n            break;\n            \n        default:\n            break;\n    }\n} else if(msg._topic.includes(\"device\")) {\n    switch(msg.service.type) {\n        case \"zwave-light-dimmer-switch\":\n            msg.techno = \"Votre ampoule LED\";\n            break;\n            \n        case \"Enocean-f6-2-1\":\n        case \"nodonSoftRemote\":\n        case \"zwave-remote-control-multi-purpose\":\n            msg.techno = \"Votre télécommande\";\n            break;\n            \n        case \"aeotecMultiSensor\":\n        case \"zwave-motion-sensor\":\n            msg.techno = \"Votre détecteur de présence\";\n            break;\n            \n        case \"zwave-binary-sensor\":\n            msg.techno = \"Votre capteur de porte\";\n            break;\n            \n        default:\n            break;\n    }\n}\nmsg.payload = msg.techno + \" est maintenant fonctionnelle.\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1970,
        "y": 460,
        "wires": [
            []
        ]
    }
]